Тема: Оптимизация кода через параметризацию
классов в системе управления задачами.

Бизнес-логика:
Вы разрабатываете систему управления задачами для компании.
В системе существуют разные типы задач, такие как задачи срочного
выполнения и задачи с обязательным приоритетом. Каждая задача имеет
дедлайн, а также стоимость, которую компания платит за её выполнение.
Компания хочет оптимизировать свой код для управления задачами,
чтобы легко добавлять новые типы задач в будущем.

Задание:

***Создайте базовый класс Task, который содержит следующие поля и методы:

Поля:
title (название задачи)
private Date deadline (срок выполнения)
priority (приоритет)
reward (стоимость выполнения)

Методы:
Конструктор для инициализации полей.
Метод  public double calculatePayment(), который будет
возвращать стоимость выполнения задачи в зависимости от приоритета.


***Создайте класс UrgentTask, который наследуется
от класса Task и добавляет следующую логику:

У задачи срочного выполнения приоритет всегда равен 1.
Дедлайн для задач срочного выполнения всегда равен сегодняшней дате.
Метод calculatePayment() переопределен так, чтобы стоимость выполнения
задачи срочного выполнения была вдвое выше.

***Создайте класс PriorityTask, который наследуется от класса
Task и добавляет следующую логику:

Поле requiredPriority (требуемый приоритет для выполнения).
Метод calculatePayment() переопределен так, чтобы стоимость выполнения
задачи считалась только если приоритет задачи соответствует требуемому.

***Создайте класс TaskManager, который будет управлять задачами и оптимизировать
код для управления ими.

Параметризируйте класс таким образом, чтобы он мог работать
с разными типами задач. Класс TaskManager должен содержать следующие методы:

Метод addTask(task: Task), который добавляет задачу в систему.
Метод calculateTotalPayment(), который суммирует стоимость в
ыполнения всех задач в системе.
Создайте примеры использования классов и их оптимизацию через параметризацию,
а также примеры вычисления общей стоимости выполнения задач.